{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Abstract Data  Campaign Finance Data","text":"<p>This package is designed to make it easy to download, validate, and load campaign finance data from the Texas Ethics Commission (TEC) website.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Download Latest TEC File</li> <li>Validate Expense &amp; Contribution Records</li> <li>Easily search for Candidates, Committees, and Contributor data</li> </ul>"},{"location":"#downloaded-latest-tec-expensecontribution-file","title":"Downloaded latest TEC Expense/Contribution file","text":"main.py<pre><code>from app.loaders.tec_loader import TECFolderLoader\n# initialize TECFolderLoader object\n\"\"\"If TEC files are downloaded, will use tmp folder. If folder/files not found, will throw error instructing user to download files \\\nwith tec_loader.download() \"\"\"\ntec_loader = TECFolderLoader()\n# download TEC files and extract to temporary folder\ntec_loader.download()\n</code></pre>"},{"location":"#load-expense-contribution-records","title":"Load Expense &amp; Contribution Records","text":"main.py<pre><code>from app.loaders.tec_loader import TECFolderLoader\nfiles = TECFolderLoader()\n# Load contribution files into a dictionary of TECFile objects\ndonors = files.contributions.load_files()\n</code></pre>"},{"location":"#validate-expense-contribution-records","title":"Validate Expense &amp; Contribution Records","text":"main.py<pre><code>from app.loaders.tec_loader import TECFolderLoader\nfiles = TECFolderLoader()\n# Validate contribution files and return a dictionary of passed and failed records\ndonor_validation = files.contributions.validate_category()\n</code></pre>"},{"location":"#search-tec-expense-and-contribution-records","title":"Search TEC Expense and Contribution Records","text":"main.py<pre><code>from app.search_tools.tec_search import TECContributionSearch, TECExpenseSearch, ResultCounter\n# Search for all campaign expenses paid to Axiom Communications\naxiom = TECExpenseSearch('AXIOM STRATEGIES')\n# Convert to DataFrame\naxiom_df = axiom.to_df()\n# Load DataFrame to ResultCounter to use various aggregation methods\naxiom_counts = ResultCounter(axiom)\naxiom_year = axiom_counts.by_year()\n</code></pre>"},{"location":"pages/project_layout/","title":"Project layout","text":"<pre><code>campaignfinance/\n\n    app/\n        conf/\n            * config.py\n            * logger.py\n        funcs/\n            * category_funcs.py\n            * general_funcs.py\n            * record_generator.py\n            * validator_funcs.py\n        getters/\n            * tec_contribution_getter.py\n            * tec_expense_getter.py\n            * [DEPRECIATED] tec_universal_getter.py\n        loaders/\n            * [IN PROGRESS] async_tec_expenses.py\n            * tec_loader.py\n            * toml_loader.py\n        models/\n            * tec_contribution_model.py\n            * tec_expense_model.py\n            * tec_filer_model.py\n            * [DEPRECIATED] tec_universal_model.py\n        pandas_schemas/\n            * tec_contribution_schema.py\n            * tec_expense_schema.py\n        search_tools/\n            * tec_search.py\n        utils/\n            field_library/\n                    * texas.toml\n            * file_field_assigner.py\n            * pydantic_builder.py\n        validators/\n            * tec_contribution_validator.py\n            * tec_expense_validator.py\n            * tec_filers_validator.py\n            * [DEPRECIATED] tec_universal_validator.py\n    tmp/\n</code></pre>"},{"location":"pages/funcs/result-counter/","title":"Result Aggregations","text":"<p>The <code>ResultCounter</code> class is a data processing class that is designed to be used with data from either <code>ContributionSearch</code> or <code>ExpenseSearch</code> classes. It provides a method called by_year that takes in a pandas DataFrame as input, groups the data by year and filer name, and returns a crosstab of the data that shows the total amount for each filer name for each year. This class has been defined using Python 3's dataclass decorator.</p>"},{"location":"pages/funcs/result-counter/#example-usage","title":"Example Usage","text":"main.py<pre><code>from app.search_tools.tec_search import ContributionSearch, ExpenseSearch, ResultCounter,\nberry = ExpenseSearch('BERRY COMMUNICATIONS')\ndf = berry.to_df()\ncounts = ResultCounter(berry)\nberry_by_year = counts.by_year()\n</code></pre>"},{"location":"pages/funcs/result-counter/#class-variables","title":"Class Variables","text":"<p>The <code>ResultCounter</code> class has three private instance variables:</p> <ul> <li><code>_data</code>: An instance of ContributionSearch or ExpenseSearch.</li> <li><code>_amount_field</code>: A string that represents the name of the amount field in the data.</li> <li><code>_date_field</code>: A string that represents the name of the date field in the data.</li> <li><code>_filer_name_field</code>: A string that represents the name of the filer name field in the data.</li> </ul>"},{"location":"pages/funcs/result-counter/#class-methods","title":"Class Methods","text":"<ul> <li> <p><code>pandas_schema</code>  This is a property that returns a TECExpensePandasSchema instance if _data is an instance of ExpenseSearch. Otherwise, it returns None.</p> </li> <li> <p><code>data</code>    This is a property that converts _data to a pandas DataFrame and returns it.</p> </li> <li> <p><code>get_fields</code>    This method returns a tuple of three strings that represent the names of the amount field, date field, and filer name field in the data, depending on whether _data is an instance of ContributionSearch or ExpenseSearch.</p> </li> <li> <p><code>by_year</code>    This method groups the data by year and filer name, and returns a crosstab of the data that shows the total amount for each filer name for each year. It takes in a pandas DataFrame as input, but if no DataFrame is provided, it uses the data property to retrieve the DataFrame. If the input is not a pandas DataFrame, a TypeError is raised.</p> </li> <li> <p><code>post_init</code>    This is a special method that is called after the instance has been initialized. It sets the values of _amount_field, _date_field, and _filer_name_field by calling the get_fields method.</p> </li> </ul>"},{"location":"pages/funcs/search/","title":"Search Methods","text":"<p>This module provides two data classes, <code>TECExpenseSearch</code> and <code>TECContributionSearch</code>, which allow you to search through expenses and contributions respectively, using a SQL query. The search queries can be executed in a PostgreSQL database through SQLAlchemy ORM.</p>"},{"location":"pages/funcs/search/#example","title":"Example","text":"main.py<pre><code>from app.search_tools.tec_search import TECExpenseSearch, TECContributionSearch\nberry = TECExpenseSearch('BERRY COMMUNICATIONS')\n</code></pre>"},{"location":"pages/funcs/search/#classes","title":"Classes","text":""},{"location":"pages/funcs/search/#queryresults","title":"QueryResults","text":"<p>This class is a protocol for all query result classes. It defines the following attributes:</p>"},{"location":"pages/funcs/search/#attributes","title":"Attributes","text":"<ul> <li><code>_query</code>: The query to execute.</li> <li><code>result</code>: The result options of the query.</li> <li><code>record_type</code>: The type of record being queried.</li> <li><code>_pandas_schema</code>: A class variable containing the Pandas schema for the query results.</li> <li><code>__connection</code>: A class variable containing the SQLAlchemy database session.</li> <li><code>__sql_table</code>: A class variable containing the SQLAlchemy model to query.</li> <li><code>_getter</code>: A class variable containing the getter class for transforming SQLAlchemy models into Pydantic models.</li> <li><code>organization</code>: True if searching for an organization, False otherwise.</li> </ul>"},{"location":"pages/funcs/search/#methods","title":"Methods","text":"<ul> <li><code>query() -&gt; str</code>: Returns the query to execute.</li> <li><code>fetch(query: str = None, record_type: str = None) -&gt; None</code>: Executes the query and stores the results.</li> <li><code>to_df() -&gt; pd.DataFrame</code>: Returns a Pandas DataFrame of the query results.</li> <li><code>__post_init__() -&gt; None</code>: Executes the fetch method after class initialization.</li> </ul>"},{"location":"pages/funcs/search/#tecexpensesearch-teccontributionsearch","title":"<code>TECExpenseSearch</code> &amp; <code>TECContributionSearch</code>","text":"<p>These classes contain the needed requirements for each type of search. Both inherit from QueryResults protocol.</p>"},{"location":"pages/tec_loading/tec_category_cls/","title":"Tec category cls","text":""},{"location":"pages/tec_loading/tec_category_cls/#teccategory","title":"TECCategory","text":"<p>The <code>TECCategory</code> class represents a category of records in a TEC dataset. It provides a number of methods for working with TEC records, including loading records from files, validating records, and loading records to a SQL database.</p>"},{"location":"pages/tec_loading/tec_category_cls/#attributes","title":"Attributes","text":"<ul> <li><code>category</code>: A generator of Path objects representing the files in the category.</li> <li><code>category_fields</code>: A dictionary of the category's fields.</li> <li><code>passed</code>: A dictionary of records that passed validation.</li> <li><code>failed</code>: A dictionary of records that failed validation.</li> <li><code>records</code>: A list of records from the category.</li> <li><code>sql_models</code>: A list of SQL models from the category.</li> </ul>"},{"location":"pages/tec_loading/tec_category_cls/#properties","title":"Properties","text":"<ul> <li><code>files</code>: A generator of <code>TECFile</code> objects.</li> </ul>"},{"location":"pages/tec_loading/tec_category_cls/#methods","title":"Methods","text":"<ul> <li> <p><code>read_files(cls, cat) -&gt; Generator[TECFile, None, None]</code>    This class method returns a generator of TECFile objects for the files in the category.</p> </li> <li> <p><code>get_category_keys(self) -&gt; dict</code>    This method returns a dictionary of the category's fields.</p> </li> <li> <p><code>load_files(self)</code>    This method loads the records from the category's files and returns a dictionary of TECFile objects.</p> </li> <li> <p><code>load_records(self, passed_only=True)</code>    This method loads the records from the category's files and returns a list of records.</p> </li> <li> <p><code>validate_category(self, load_to_sql: bool = False) -&gt; object</code>    This method validates the records in the category and returns a dictionary of passed and failed records.</p> </li> <li> <p><code>load_file_to_sql(cls, models: Generator, session: sessionmaker = SessionLocal)</code>    This class method loads the records in the category to a SQL database.</p> </li> </ul>"},{"location":"pages/tec_loading/tec_file_cls/","title":"Tec file cls","text":""},{"location":"pages/tec_loading/tec_file_cls/#tecfile","title":"TECFile","text":"<p>Represents a TEC (Texas Ethics Commission) file. Generates records from the file on instantiation.</p>"},{"location":"pages/tec_loading/tec_file_cls/#attributes","title":"Attributes","text":"<ul> <li><code>file</code>: Path - The file path.</li> <li><code>passed</code>: List - A list of records that passed validation.</li> <li><code>failed</code>: List - A list of records that failed validation.</li> <li><code>to_sql</code>: Generator[RECORD_SQL_MODEL, None, None] - A generator of records to be loaded into the database.</li> <li><code>validator</code>: settings.VALIDATOR - The file's validator.</li> <li><code>sql_model</code>: settings.SQL_MODEL - The file's SQL model.</li> </ul>"},{"location":"pages/tec_loading/tec_file_cls/#properties","title":"Properties","text":"<ul> <li><code>records</code>: Generator[TECRecord, None, None] - A generator of records from the file.</li> </ul>"},{"location":"pages/tec_loading/tec_file_cls/#methods","title":"Methods","text":"<ul> <li><code>load_records(passed_only=True) -&gt; Dict[int, RECORD_SQL_MODEL]</code> - Returns a dictionary of records from the file.</li> <li><code>validate_file() -&gt; [List, List]</code> - Validates the file and returns a list of passed and failed records.</li> <li><code>generate_models() -&gt; Generator[RECORD_SQL_MODEL, None, None]</code> - Returns a generator of SQL models that passed validation.</li> </ul>"},{"location":"pages/tec_loading/tec_folderloader/","title":"Download","text":""},{"location":"pages/tec_loading/tec_folderloader/#overview","title":"Overview","text":"<p>The <code>TECFolderLoader</code> class is responsible for loading the TEC (Texas Ethics Commission) files into the database and returning a dictionary of SQL models. It contains methods for downloading TEC files from a URL and extracting them into a temporary folder, as well as a method for listing all the files in the folder.</p>"},{"location":"pages/tec_loading/tec_folderloader/#attributes","title":"Attributes","text":"<ul> <li><code>folder</code>: A Path object representing the folder where the TEC files are located. By default, this is set to the current working directory (Path.cwd()) followed by the \"tmp\" subdirectory.</li> <li><code>_ZIPFILE_URL</code>: A string representing the URL where the TEC files are located.</li> <li><code>expenses</code>: A TECCategory object representing the expenses TEC category.</li> <li><code>contributions</code>: A TECCategory object representing the contributions TEC category.</li> </ul>"},{"location":"pages/tec_loading/tec_folderloader/#methods","title":"Methods","text":"<ul> <li><code>file_list(cls, prefix)</code>: Returns a generator object that yields all the files in the folder with the specified prefix. The prefix argument should be a string that represents the prefix of the file name.</li> <li><code>download(cls, read_from_temp=True)</code>: Downloads the TEC files from the _ZIPFILE_URL URL and extracts them into the folder directory. By default, the method reads from the temporary folder if it exists (read_from_temp=True). If the read_from_temp argument is set to False, the method prompts the user to overwrite the temporary folder or use it as the source. If the user chooses to overwrite the temporary folder, the method downloads the files from the URL and extracts them into the temporary folder. If the user chooses to use the temporary folder as the source, the method checks if the temporary folder contains the necessary CSV files. If not, it extracts the ZIP file into the temporary folder. If the user chooses not to overwrite the temporary folder, the method exits.</li> <li><code>__post_init__(self)</code>: This method initializes the expenses and contributions class variables with the files in the folder directory that match the settings.EXPENSE_FILE_PREFIX and settings.CONTRIBUTION_FILE_PREFIX prefixes, respectively.</li> </ul>"},{"location":"pages/tec_loading/tec_folderloader/#download-example","title":"Download Example","text":"<p>Download TEC files and extract to temporary folder - Checks if files are in tmp folder. - If files are in tmp folder, will prompt user to overwrite tmp folder or use it as source. If user chooses to overwrite, will download files from TEC website and extract to tmp folder. main.py<pre><code>from app.loaders.tec_loader import TECFolderLoader\n# initialize TECFolderLoader object\ntec_loader = TECFolderLoader()\ntec_loader.download(read_from_temp=True)\n</code></pre></p>"},{"location":"pages/tec_loading/tec_folderloader/#iterate-over-files-example","title":"Iterate Over Files Example","text":"<p>Iterate over all files in the expenses and contributions TEC categories.</p> main.py<pre><code># iterate over all files in the expenses TEC category\nfor file in tec_loader.expenses:\nprint(file)\n# iterate over all files in the contributions TEC category\nfor file in tec_loader.contributions:\nprint(file)\n</code></pre>"},{"location":"pages/tec_loading/tec_folderloader/#review","title":"Review","text":"<p>In this example, we first create a new <code>TECFolderLoader</code> object. We then download the TEC files and extract them to the temporary folder by calling the <code>download</code> method. Finally, we iterate over all the files in the expenses and contributions TEC categories by accessing the <code>expenses</code> and <code>contributions</code> attributes, respectively.</p>"},{"location":"pages/tec_loading/tec_load_example/","title":"Example","text":"<p>Put together, <code>TECRecord</code>, <code>TECFile</code>, and <code>TECCategory</code> handle everything you need for loading, validating, and inserting TEC records into a SQL database through the <code>TECFolderLoader</code> class.</p>"},{"location":"pages/tec_loading/tec_load_example/#example","title":"Example","text":"main.py<pre><code>from app.loaders.tec_loader import TECFolderLoader\nfiles = TECFolderLoader()\n# Load contribution files into a dictionary of TECFile objects\ndonors = files.contributions.load_files()\n# Validate contribution files and return a dictionary of passed and failed records\ndonor_validation = files.contributions.validate_category()\n</code></pre>"},{"location":"pages/tec_loading/tec_record_classes/","title":"Supporting classes","text":""},{"location":"pages/tec_loading/tec_record_classes/#tecrecord","title":"TECRecord","text":"<p>The <code>TECRecord</code>class represents a record from a TEC file. It contains the data from the record, the record's category, and the appropriate validator and SQL model based on the record's category.</p>"},{"location":"pages/tec_loading/tec_record_classes/#attributes","title":"Attributes","text":"<ul> <li><code>data</code>: A dictionary of the record's data.</li> <li><code>category</code>: The record's category.</li> <li><code>validator</code>: The appropriate validator based on the record's category.</li> <li><code>sql_model</code>: The appropriate SQL model based on the record's category.</li> </ul>"},{"location":"pages/tec_loading/tec_record_classes/#methods","title":"Methods","text":"<ul> <li><code>get_validator()</code>: Checks the record's category and returns the appropriate validator and SQL model.</li> </ul>"},{"location":"pages/tec_loading/tec_record_classes/#tecfile","title":"TECFile","text":"<p>Represents a TEC (Texas Ethics Commission) file. Generates records from the file on instantiation.</p>"},{"location":"pages/tec_loading/tec_record_classes/#attributes_1","title":"Attributes","text":"<ul> <li><code>file</code>: Path - The file path.</li> <li><code>passed</code>: List - A list of records that passed validation.</li> <li><code>failed</code>: List - A list of records that failed validation.</li> <li><code>to_sql</code>: Generator[RECORD_SQL_MODEL, None, None] - A generator of records to be loaded into the database.</li> <li><code>validator</code>: settings.VALIDATOR - The file's validator.</li> <li><code>sql_model</code>: settings.SQL_MODEL - The file's SQL model.</li> </ul>"},{"location":"pages/tec_loading/tec_record_classes/#properties","title":"Properties","text":"<ul> <li><code>records</code>: Generator[TECRecord, None, None] - A generator of records from the file.</li> </ul>"},{"location":"pages/tec_loading/tec_record_classes/#methods_1","title":"Methods","text":"<ul> <li><code>load_records(passed_only=True) -&gt; Dict[int, RECORD_SQL_MODEL]</code> - Returns a dictionary of records from the file.</li> <li><code>validate_file() -&gt; [List, List]</code> - Validates the file and returns a list of passed and failed records.</li> <li><code>generate_models() -&gt; Generator[RECORD_SQL_MODEL, None, None]</code> - Returns a generator of SQL models that passed validation.</li> </ul>"},{"location":"pages/tec_loading/tec_record_classes/#teccategory","title":"TECCategory","text":"<p>The <code>TECCategory</code> class represents a category of records in a TEC dataset. It provides a number of methods for working with TEC records, including loading records from files, validating records, and loading records to a SQL database.</p>"},{"location":"pages/tec_loading/tec_record_classes/#attributes_2","title":"Attributes","text":"<ul> <li><code>category</code>: A generator of Path objects representing the files in the category.</li> <li><code>category_fields</code>: A dictionary of the category's fields.</li> <li><code>passed</code>: A dictionary of records that passed validation.</li> <li><code>failed</code>: A dictionary of records that failed validation.</li> <li><code>records</code>: A list of records from the category.</li> <li><code>sql_models</code>: A list of SQL models from the category.</li> </ul>"},{"location":"pages/tec_loading/tec_record_classes/#properties_1","title":"Properties","text":"<ul> <li><code>files</code>: A generator of <code>TECFile</code> objects.</li> </ul>"},{"location":"pages/tec_loading/tec_record_classes/#methods_2","title":"Methods","text":"<ul> <li> <p><code>read_files(cls, cat) -&gt; Generator[TECFile, None, None]</code>    This class method returns a generator of TECFile objects for the files in the category.</p> </li> <li> <p><code>get_category_keys(self) -&gt; dict</code>    This method returns a dictionary of the category's fields.</p> </li> <li> <p><code>load_files(self)</code>    This method loads the records from the category's files and returns a dictionary of TECFile objects.</p> </li> <li> <p><code>load_records(self, passed_only=True)</code>    This method loads the records from the category's files and returns a list of records.</p> </li> <li> <p><code>validate_category(self, load_to_sql: bool = False) -&gt; object</code>    This method validates the records in the category and returns a dictionary of passed and failed records.</p> </li> <li> <p><code>load_file_to_sql(cls, models: Generator, session: sessionmaker = SessionLocal)</code>    This class method loads the records in the category to a SQL database.</p> </li> </ul>"},{"location":"pages/tec_loading/tec_record_cls/","title":"Tec record cls","text":""},{"location":"pages/tec_loading/tec_record_cls/#tecrecord","title":"TECRecord","text":"<p>The <code>TECRecord</code>class represents a record from a TEC file. It contains the data from the record, the record's category, and the appropriate validator and SQL model based on the record's category.</p>"},{"location":"pages/tec_loading/tec_record_cls/#attributes","title":"Attributes","text":"<ul> <li><code>data</code>: A dictionary of the record's data.</li> <li><code>category</code>: The record's category.</li> <li><code>validator</code>: The appropriate validator based on the record's category.</li> <li><code>sql_model</code>: The appropriate SQL model based on the record's category.</li> </ul>"},{"location":"pages/tec_loading/tec_record_cls/#methods","title":"Methods","text":"<ul> <li><code>get_validator()</code>: Checks the record's category and returns the appropriate validator and SQL model.</li> </ul>"}]}